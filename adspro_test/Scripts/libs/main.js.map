{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/admin-customer/admin-customer.component.css","webpack:///./src/app/components/admin-customer/admin-customer.component.html","webpack:///./src/app/components/admin-customer/admin-customer.component.ts","webpack:///./src/app/components/customer/customer.component.css","webpack:///./src/app/components/customer/customer.component.html","webpack:///./src/app/components/customer/customer.component.ts","webpack:///./src/app/components/history/history.component.css","webpack:///./src/app/components/history/history.component.html","webpack:///./src/app/components/history/history.component.ts","webpack:///./src/app/components/home/home.component.css","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/components/modal/modal.component.css","webpack:///./src/app/components/modal/modal.component.html","webpack:///./src/app/components/modal/modal.component.ts","webpack:///./src/app/components/statistic/statistic.component.css","webpack:///./src/app/components/statistic/statistic.component.html","webpack:///./src/app/components/statistic/statistic.component.ts","webpack:///./src/app/interfaces/address.ts","webpack:///./src/app/interfaces/customer.ts","webpack:///./src/app/interfaces/email.ts","webpack:///./src/app/interfaces/phone.ts","webpack:///./src/app/services/admin-auth.service.ts","webpack:///./src/app/services/customer.service.ts","webpack:///./src/app/services/user.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"\\r\\n<div class=\\\"container\\\">\\r\\n    <router-outlet></router-outlet>\\r\\n</div>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http'\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AppComponent } from './app.component';\r\nimport { CustomerComponent } from './components/customer/customer.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { AdminCustomerComponent } from './components/admin-customer/admin-customer.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { AdminAuthService } from './services/admin-auth.service';\r\nimport { ModalComponent } from './components/modal/modal.component';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { HistoryComponent } from './components/history/history.component';\r\nimport { StatisticComponent } from './components/statistic/statistic.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n      AppComponent,\r\n      CustomerComponent,\r\n      HomeComponent,\r\n      AdminCustomerComponent,\r\n      ModalComponent,\r\n      HistoryComponent,\r\n      StatisticComponent\r\n  ],\r\n  imports: [\r\n      BrowserModule,\r\n      HttpClientModule,\r\n      MatDialogModule,\r\n      FormsModule,\r\n      BrowserAnimationsModule,\r\n      MatTableModule,\r\n      MatButtonModule,\r\n      RouterModule.forRoot([\r\n          { path: '', component: HomeComponent },\r\n          { path: 'customers/edit/:id', component: CustomerComponent },\r\n          { path: 'customers/new', component: CustomerComponent },\r\n          { path: 'admin/customers', component: AdminCustomerComponent, canActivate: [AdminAuthService] }\r\n      ], {\r\n              useHash: true\r\n          })\r\n    ],\r\n    entryComponents: [\r\n        ModalComponent,\r\n        HistoryComponent,\r\n        StatisticComponent\r\n    ],\r\n    providers: [],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\"","module.exports = \"<button class=\\\"btn btn-outline-info mb-3\\\" (click)=\\\"viewStatistics()\\\">View Statistics</button>\\r\\n<h4 class=\\\"mb-3\\\">Customers</h4>\\r\\n<input type=\\\"text\\\" placeholder=\\\"search...\\\" (keyup)=\\\"filter(i)\\\" class=\\\"form-control mb-3\\\" #i/>\\r\\n<table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8 w-100\\\">\\r\\n\\r\\n    <ng-container matColumnDef=\\\"email\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef> Email </th>\\r\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.email}} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"profile\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef> Profile </th>\\r\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n            <ng-container *ngIf=\\\"element.customerId; else noProfile\\\">\\r\\n                <a routerLink=\\\"/customers/edit/{{element.customerId}}\\\">Edit</a>\\r\\n            </ng-container>\\r\\n            <ng-template #noProfile>\\r\\n                No profile | <a routerLink=\\\"/customers/new\\\" [queryParams]=\\\"{ userId: element.userId }\\\">create</a>\\r\\n            </ng-template>\\r\\n        </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n\"","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { User } from '../../interfaces/user';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { UserService } from '../../services/user.service';\r\nimport { CustomerService } from '../../services/customer.service';\r\nimport { StatisticComponent } from '../statistic/statistic.component';\r\nimport { Statistic } from '../../interfaces/statistic';\r\nimport { MatDialog } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-admin-customer',\r\n  templateUrl: './admin-customer.component.html',\r\n  styleUrls: ['./admin-customer.component.css']\r\n})\r\nexport class AdminCustomerComponent implements OnInit, OnDestroy {\r\n    displayedColumns: string[] = ['email', 'profile'];\r\n    statistics: Statistic;\r\n    usersSub: Subscription;\r\n    statisticSub: Subscription;\r\n    dataSource;\r\n\r\n    constructor(private userService: UserService, private customerService: CustomerService, private dialog: MatDialog) { }\r\n\r\n    ngOnInit() {\r\n        this.usersSub = this.userService.getUsersInRole('Customer').subscribe(users => {\r\n            this.dataSource = new MatTableDataSource<User>(users);\r\n        });\r\n\r\n        this.statisticSub = this.customerService.getStatistics().subscribe(response => this.statistics = response);\r\n    }\r\n\r\n    filter(input: HTMLInputElement) {\r\n        if (this.dataSource)\r\n            this.dataSource.filter = input.value.trim().toLowerCase();\r\n    }\r\n\r\n    viewStatistics() {\r\n        const dialogRef = this.dialog.open(StatisticComponent, {\r\n            width: '400px',\r\n            data: this.statistics\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.usersSub) this.usersSub.unsubscribe();\r\n        if (this.statisticSub) this.statisticSub.unsubscribe();\r\n    }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<ng-template #info>\\r\\n    <div class=\\\"container\\\">\\r\\n        <form (ngSubmit)=\\\"submit()\\\" #form=\\\"ngForm\\\">\\r\\n            <button class=\\\"btn btn-outline-info mb-3\\\" type=\\\"button\\\" *ngIf=\\\"customer.id\\\" (click)=\\\"viewHistory()\\\">View History</button>\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-12 mb-4\\\">\\r\\n                    <h5 class=\\\"mb-3\\\">Customer Info</h5>\\r\\n\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Name\\\" name=\\\"name\\\" [(ngModel)]=\\\"customer.name\\\" required #name=\\\"ngModel\\\" />\\r\\n                        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"name.touched && name.invalid\\\">\\r\\n                            <div *ngIf=\\\"name.errors.required\\\">Name is required.</div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Surname\\\" name=\\\"surname\\\" [(ngModel)]=\\\"customer.surname\\\" required #surname=\\\"ngModel\\\" />\\r\\n                        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"surname.touched && surname.invalid\\\">\\r\\n                            <div *ngIf=\\\"surname.errors.required\\\">Surname is required.</div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"middlename\\\" placeholder=\\\"Middlename (optional)\\\" [(ngModel)]=\\\"customer.middleName\\\" />\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"notes\\\" placeholder=\\\"Notes (optional)\\\" [(ngModel)]=\\\"customer.notes\\\" />\\r\\n                    </div>\\r\\n\\r\\n                </div><!--/.col-6-->\\r\\n\\r\\n                <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-12 mb-4\\\">\\r\\n                    <h5 class=\\\"mb-3\\\">Email</h5>\\r\\n\\r\\n                    <ng-container *ngFor=\\\"let email of customer.emails; index as i\\\">\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <div class=\\\"input-group\\\">\\r\\n                                <input type=\\\"text\\\" name=\\\"type{{i}}\\\" placeholder=\\\"Type\\\" [(ngModel)]=\\\"email.type\\\" class=\\\"form-control\\\" required #type=\\\"ngModel\\\" />\\r\\n                                <div class=\\\"input-group-append\\\" *ngIf=\\\"i > 0\\\">\\r\\n                                    <button class=\\\"btn btn-outline-info\\\" type=\\\"button\\\" (click)=\\\"deleteEmail(email)\\\">delete</button>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"type.touched && type.invalid\\\">\\r\\n                                <div *ngIf=\\\"type.errors.required\\\">Type is required.</div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <input type=\\\"email\\\" name=\\\"email{{i}}\\\" placeholder=\\\"Email\\\" [(ngModel)]=\\\"email.value\\\" class=\\\"form-control\\\" required email #em=\\\"ngModel\\\" />\\r\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"em.touched && em.invalid\\\">\\r\\n                                <div *ngIf=\\\"em.errors.required\\\">Email is required.</div>\\r\\n                                <div *ngIf=\\\"em.errors.email\\\">Invalid email.</div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </ng-container>\\r\\n\\r\\n                    <button class=\\\"btn btn-outline-info\\\" type=\\\"button\\\" (click)=\\\"addEmail()\\\">Add Email</button>\\r\\n\\r\\n                </div><!--/.col-6-->\\r\\n\\r\\n                <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-12 mb-4\\\">\\r\\n\\r\\n                    <h5 class=\\\"mb-3\\\">Address</h5>\\r\\n\\r\\n                    <ng-container *ngFor=\\\"let address of customer.addresses; index as i\\\">\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <div class=\\\"input-group\\\">\\r\\n                                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Type\\\" name=\\\"type_addr{{i}}\\\" [(ngModel)]=\\\"address.type\\\" required #type=\\\"ngModel\\\" />\\r\\n                                <div class=\\\"input-group-append\\\" *ngIf=\\\"i > 0\\\">\\r\\n                                    <button class=\\\"btn btn-outline-info\\\" type=\\\"button\\\" (click)=\\\"deleteAddress(address)\\\">delete</button>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"type.touched && type.invalid\\\">\\r\\n                                <div *ngIf=\\\"type.errors.required\\\">Type is required.</div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"City\\\" name=\\\"city{{i}}\\\" [(ngModel)]=\\\"address.city\\\" required #city=\\\"ngModel\\\" />\\r\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"city.touched && city.invalid\\\">\\r\\n                                <div *ngIf=\\\"city.errors.required\\\">City is required.</div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Postal code\\\" name=\\\"postalCode{{i}}\\\" [(ngModel)]=\\\"address.postalCode\\\" required #postalCode=\\\"ngModel\\\" />\\r\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"postalCode.touched && postalCode.invalid\\\">\\r\\n                                <div *ngIf=\\\"postalCode.errors.required\\\">Postal code is required.</div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Street line 1\\\" name=\\\"street1_{{i}}\\\" [(ngModel)]=\\\"address.street.street1\\\" required #street=\\\"ngModel\\\" />\\r\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"street.touched && street.invalid\\\">\\r\\n                                <div *ngIf=\\\"street.errors.required\\\">Street is required.</div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"street2_{{i}}\\\" [(ngModel)]=\\\"address.street.street2\\\" placeholder=\\\"Street line 2 (optional)\\\" />\\r\\n                        </div>\\r\\n                    </ng-container>\\r\\n\\r\\n                    <button class=\\\"btn btn-outline-info\\\" type=\\\"button\\\" (click)=\\\"addAddress()\\\">Add Address</button>\\r\\n\\r\\n                </div><!--/.col-6-->\\r\\n\\r\\n                <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-12 mb-4\\\">\\r\\n\\r\\n                    <h5 class=\\\"mb-3\\\">Phone</h5>\\r\\n\\r\\n                    <ng-container *ngFor=\\\"let phone of customer.phones; index as i\\\">\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <div class=\\\"input-group\\\">\\r\\n                                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Type\\\" name=\\\"type_phone{{i}}\\\" [(ngModel)]=\\\"phone.type\\\" required #type=\\\"ngModel\\\" />\\r\\n                                <div class=\\\"input-group-append\\\" *ngIf=\\\"i > 0\\\">\\r\\n                                    <button class=\\\"btn btn-outline-info\\\" type=\\\"button\\\" (click)=\\\"deletePhone(phone)\\\">delete</button>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"type.touched && type.invalid\\\">\\r\\n                                <div *ngIf=\\\"type.errors.required\\\">Type is required.</div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <input type=\\\"tel\\\" class=\\\"form-control\\\" placeholder=\\\"Phone\\\" name=\\\"value{{i}}\\\" [(ngModel)]=\\\"phone.value\\\" required #value=\\\"ngModel\\\" />\\r\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"value.touched && value.invalid\\\">\\r\\n                                <div *ngIf=\\\"value.errors.required\\\">Phone is required.</div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                    </ng-container>\\r\\n\\r\\n                    <button class=\\\"btn btn-outline-info\\\" type=\\\"button\\\" (click)=\\\"addPhone()\\\">Add Phone</button>\\r\\n\\r\\n                </div><!--/.col-6-->\\r\\n\\r\\n            </div><!--/.row-->\\r\\n            <button class=\\\"btn btn-outline-primary mr-2\\\" type=\\\"submit\\\" [disabled]=\\\"form.invalid\\\">Save</button>\\r\\n            <button class=\\\"btn btn-outline-danger\\\" type=\\\"button\\\" *ngIf=\\\"customer.id && isAdmin\\\" (click)=\\\"deleteProfile()\\\">Delete</button>\\r\\n        </form>\\r\\n    </div>\\r\\n</ng-template>\\r\\n\\r\\n<div class=\\\"d-flex align-content-center justify-content-center\\\" *ngIf=\\\"inProgress; else info\\\">\\r\\n    <p>Loading...</p>\\r\\n</div>\"","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { CustomerService } from '../../services/customer.service';\r\nimport { Customer } from '../../interfaces/customer';\r\nimport { Email } from '../../interfaces/email';\r\nimport { Address } from '../../interfaces/address';\r\nimport { Phone } from '../../interfaces/phone';\r\nimport { Subscription, Observable } from 'rxjs';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { UserService } from '../../services/user.service';\r\nimport { ModalComponent } from '../modal/modal.component';\r\nimport { MatDialog } from '@angular/material';\r\nimport { HistoryComponent } from '../history/history.component';\r\nimport * as _ from 'underscore';\r\nimport { Change } from '../../interfaces/change';\r\n\r\n@Component({\r\n  selector: 'customer',\r\n  templateUrl: './customer.component.html',\r\n  styleUrls: ['./customer.component.css']\r\n})\r\nexport class CustomerComponent implements OnInit, OnDestroy {\r\n    customer: Customer;\r\n    userId: string;\r\n    customerSub: Subscription;\r\n    editCustomerSub: Subscription;\r\n    dialogSub: Subscription;\r\n    adminSub: Subscription;\r\n    isAdmin: boolean;\r\n    inProgress: boolean = true;\r\n    id: string;\r\n\r\n    constructor(private service: CustomerService, private router: Router, private route: ActivatedRoute, private userService: UserService, private dialog: MatDialog) { }\r\n\r\n    ngOnInit() {\r\n        this.customer = new Customer();\r\n        this.userId = localStorage.getItem('userId'); \r\n        this.id = this.route.snapshot.paramMap.get('id');\r\n\r\n        this.adminSub = this.userService.isInRole(this.userId, 'Admin').subscribe(response => this.isAdmin = response);\r\n\r\n        if (this.id)\r\n            this.customerSub = this.service.getCustomer(this.id).subscribe(customer => {\r\n                this.inProgress = true;\r\n\r\n                this.customer = customer;\r\n                this.customer.userId = this.customer.issuerId = this.userId;         \r\n\r\n                this.inProgress = false;\r\n            });\r\n        else {\r\n            this.inProgress = false;\r\n\r\n            let queryId = this.route.snapshot.queryParamMap.get('userId');\r\n            this.addAddress();\r\n            this.addEmail();\r\n            this.addPhone();\r\n            this.customer.userId = queryId ? queryId : this.userId;\r\n            this.customer.issuerId = this.userId;\r\n        }\r\n    }\r\n\r\n    submit() {\r\n        this.editCustomerSub = this.id\r\n            ? this.service.updateCustomer(this.id, this.customer).subscribe(response => {\r\n                if (response)\r\n                    this.isAdmin ? this.router.navigate(['/admin/customers']) : this.router.navigate(['/']);\r\n            })\r\n            : this.service.createCustomer(this.customer).subscribe(response => {\r\n                if (response)\r\n                    this.isAdmin ? this.router.navigate(['/admin/customers']) : this.router.navigate(['/']);\r\n            });\r\n    }\r\n\r\n    addAddress() {\r\n        this.customer.addresses.push(new Address());\r\n    }\r\n\r\n    addPhone() {\r\n        this.customer.phones.push(new Phone());\r\n    }\r\n\r\n    addEmail() {\r\n        this.customer.emails.push(new Email());\r\n    }\r\n\r\n    deleteEmail(email: Email) {\r\n        let index = this.customer.emails.indexOf(email);\r\n        if (index > -1)\r\n            this.customer.emails.splice(index, 1);\r\n    }\r\n\r\n    deleteAddress(address: Address) {\r\n        let index = this.customer.addresses.indexOf(address);\r\n        if (index > -1)\r\n            this.customer.addresses.splice(index, 1);\r\n    }\r\n\r\n    deletePhone(phone: Phone) {\r\n        let index = this.customer.phones.indexOf(phone);\r\n        if (index > -1)\r\n            this.customer.phones.splice(index, 1);\r\n    }\r\n\r\n    deleteProfile() {\r\n        const dialogRef = this.dialog.open(ModalComponent, {\r\n            width: '400px',\r\n            data: { title: 'Delete profile', content: 'Are you sure you want to delete this profile?'}\r\n        });\r\n\r\n        this.dialogSub = dialogRef.afterClosed().subscribe(result => {\r\n            if (result)\r\n                this.service.deleteCustomer(this.customer.id).subscribe(response => {\r\n                    if (response)\r\n                        this.router.navigate(['/admin/customers']);\r\n                })\r\n        });\r\n    }\r\n\r\n    viewHistory() {\r\n        if (!this.isAdmin)\r\n            this.customer.changes = _.reject(this.customer.changes, function (item: Change) {\r\n                return item.isAdminChange == true;\r\n            });\r\n\r\n        const dialogRef = this.dialog.open(HistoryComponent, {\r\n            width: '600px',\r\n            data: this.customer.changes\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.customerSub) this.customerSub.unsubscribe();\r\n        if (this.editCustomerSub) this.editCustomerSub.unsubscribe();\r\n        if (this.dialogSub) this.dialogSub.unsubscribe();\r\n        if (this.adminSub) this.adminSub.unsubscribe();\r\n    }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<h2 mat-dialog-title>History</h2>\\r\\n<mat-dialog-content *ngIf=\\\"changes\\\">\\r\\n    <p *ngFor=\\\"let change of changes\\\">\\r\\n        {{change.dateChanged | date:'medium'}}: {{change.userName}}\\r\\n        <span class=\\\"badge badge-info\\\" *ngIf=\\\"change.isAdminChange\\\">admin</span>\\r\\n    </p>\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n    <button mat-button class=\\\"no-outline\\\" mat-dialog-close>Close</button>\\r\\n</mat-dialog-actions>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material';\r\nimport { Change } from '../../interfaces/change';\r\n\r\n@Component({\r\n  selector: 'history',\r\n  templateUrl: './history.component.html',\r\n  styleUrls: ['./history.component.css']\r\n})\r\nexport class HistoryComponent implements OnInit {\r\n\r\n    constructor(@Inject(MAT_DIALOG_DATA) public changes: Change[]) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<ng-container *ngIf=\\\"!inProgress\\\">\\r\\n    <ng-template #noProfile>\\r\\n        <p>You haven't created profile yet.</p>\\r\\n        <a class=\\\"btn btn-outline-primary\\\" routerLink=\\\"/customers/new\\\">Create</a>\\r\\n    </ng-template>\\r\\n\\r\\n    <div class=\\\"container\\\" *ngIf=\\\"user && user.customerId; else noProfile\\\">\\r\\n        <ng-container *ngIf=\\\"customer$ | async as customer\\\">\\r\\n            <h3 class=\\\"mb-3\\\">Info</h3>\\r\\n            <a class=\\\"btn btn-outline-primary mb-3\\\" routerLink=\\\"/customers/edit/{{user.customerId}}\\\">Edit</a>\\r\\n            <p>Name: {{customer.name}}</p>\\r\\n            <p>Surname: {{customer.surname}}</p>\\r\\n            <p>MiddleName: {{customer.middleName ? customer.middleName : 'not specified'}}</p>\\r\\n            <hr />\\r\\n\\r\\n            <h4>Email</h4>\\r\\n            <ng-container *ngFor=\\\"let email of customer.emails\\\">\\r\\n                <p>Type: {{email.type}}</p>\\r\\n                <p>Value: {{email.value}}</p>\\r\\n                <hr />\\r\\n            </ng-container>\\r\\n\\r\\n            <h4>Phone</h4>\\r\\n            <ng-container *ngFor=\\\"let phone of customer.phones\\\">\\r\\n                <p>Type: {{phone.type}}</p>\\r\\n                <p>Value: {{phone.value}}</p>\\r\\n                <hr />\\r\\n            </ng-container>\\r\\n\\r\\n            <h4>Address</h4>\\r\\n            <ng-container *ngFor=\\\"let address of customer.addresses\\\">\\r\\n                <p>Type: {{address.type}}</p>\\r\\n                <p>City: {{address.city}}</p>\\r\\n                <p>Street: {{address.street.street1}}</p>\\r\\n                <p *ngIf=\\\"address.street.street2\\\">Street line 2: {{address.street.street2}}</p>\\r\\n                <p>Postal code: {{address.postalCode}}</p>\\r\\n                <hr />\\r\\n            </ng-container>\\r\\n\\r\\n            <ng-container *ngIf=\\\"customer.notes\\\">\\r\\n                <h4>Notes</h4>\\r\\n                <p>{{customer.notes}}</p>\\r\\n            </ng-container>\\r\\n        </ng-container>\\r\\n    </div>\\r\\n</ng-container>\\r\\n\\r\\n\\r\\n\"","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { CustomerService } from '../../services/customer.service';\r\nimport { User } from '../../interfaces/user';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { Customer } from '../../interfaces/customer';\r\nimport { UserService } from '../../services/user.service';\r\n\r\n@Component({\r\n  selector: 'home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit, OnDestroy {\r\n    user: User;\r\n    customer$: Observable<Customer>;\r\n    inProgress: boolean = true;\r\n\r\n    userSub: Subscription;\r\n\r\n    constructor(private customerService: CustomerService, private userService: UserService) { }\r\n\r\n    ngOnInit() {\r\n        let id = localStorage.getItem('userId');\r\n        if (id) {\r\n            this.userSub = this.userService.getUser(id).subscribe(user => {\r\n                this.inProgress = true;\r\n\r\n                this.user = user;\r\n                if (user.customerId)\r\n                    this.customer$ = this.customerService.getCustomer(user.customerId);\r\n\r\n                this.inProgress = false;\r\n            });\r\n        }\r\n        else this.inProgress = false;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.userSub) this.userSub.unsubscribe();\r\n    }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<h2 mat-dialog-title>{{data.title}}</h2>\\r\\n<mat-dialog-content>{{data.content}}</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n    <button mat-button class=\\\"no-outline\\\" [mat-dialog-close]=\\\"false\\\">No</button>\\r\\n    <!-- The mat-dialog-close directive optionally accepts a value as a result for the dialog. -->\\r\\n    <button mat-button class=\\\"no-outline\\\" [mat-dialog-close]=\\\"true\\\">Yes</button>\\r\\n</mat-dialog-actions>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'modal',\r\n  templateUrl: './modal.component.html',\r\n  styleUrls: ['./modal.component.css']\r\n})\r\nexport class ModalComponent implements OnInit {\r\n\r\n    constructor(@Inject(MAT_DIALOG_DATA) public data: any) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<h2 mat-dialog-title>Statistics</h2>\\r\\n<mat-dialog-content *ngIf=\\\"statistics\\\">\\r\\n    <p>Total profiles: {{statistics.totalProfiles}}</p>\\r\\n    <p>Admin profiles: {{statistics.adminProfiles}}</p>\\r\\n    <p>Customer profiles: {{statistics.customerProfiles}}</p>\\r\\n    <p>Profiles added: {{statistics.profilesAdded}}</p>\\r\\n    <p>Profiles deleted: {{statistics.profilesDeleted}}</p>\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n    <button mat-button class=\\\"no-outline\\\" mat-dialog-close>Close</button>\\r\\n</mat-dialog-actions>\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { Statistic } from '../../interfaces/statistic';\r\nimport { MAT_DIALOG_DATA } from '@angular/material';\r\n\n@Component({\n  selector: 'app-statistic',\n  templateUrl: './statistic.component.html',\n  styleUrls: ['./statistic.component.css']\n})\nexport class StatisticComponent implements OnInit {\n\n    constructor(@Inject(MAT_DIALOG_DATA) public statistics: Statistic) { }\n\n  ngOnInit() {\n  }\n}\n","import { Street } from \"./street\";\r\n\r\nexport class Address {\r\n    id: string;\r\n    type: string;\r\n    postalCode: string;\r\n    city: string;\r\n    street: Street;\r\n\r\n    constructor() {\r\n        this.id = '';\r\n        this.type = '';\r\n        this.postalCode = '';\r\n        this.city = '';\r\n        this.street = {\r\n            id: '',\r\n            street1: '',\r\n            street2: ''\r\n        }\r\n    }\r\n}\r\n","import { Address } from \"./address\";\r\nimport { Phone } from \"./phone\";\r\nimport { Email } from \"./email\";\r\nimport { Change } from \"./change\";\r\n\r\nexport class Customer {\r\n    id: string;\r\n    name: string;\r\n    surname: string;\r\n    middleName: string;\r\n    notes: string;\r\n    userId: string;\r\n    issuerId: string;\r\n    addresses: Address[];\r\n    phones: Phone[];\r\n    emails: Email[];\r\n    changes: Change[];\r\n\r\n    constructor(init?: Partial<Customer>) {\r\n        this.emails = [];\r\n        this.phones = [];\r\n        this.addresses = [];\r\n        this.changes = [];\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n","export class Email {\n    id: string;\n    type: string;\n    value: string;\n\n    constructor() {\n        this.id = '';\n        this.type = '';\n        this.value = '';\r\n    }\n}\n","export class Phone {\n    id: string;\n    type: string;\n    value: string;\n\n    constructor() {\n        this.id = '';\r\n        this.type = '';\r\n        this.value = '';\r\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { UserService } from './user.service';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminAuthService implements CanActivate {\r\n\r\n    constructor(private userService: UserService, private router: Router) { }\r\n\r\n    canActivate(): Observable<boolean> {\r\n        let userId = localStorage.getItem('userId');\r\n\r\n        if (userId)\r\n            return this.userService.isInRole(userId, 'Admin');\r\n\r\n        this.router.navigate(['/'])\r\n        return of(false);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Customer } from '../interfaces/customer';\r\nimport { User } from '../interfaces/user';\r\nimport { Statistic } from '../interfaces/statistic';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CustomerService {\r\n    private url: string = 'http://localhost:52073/api/customers';\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    //HttpGet api/customers\r\n    public getCustomers(): Observable<Customer[]> {\r\n        return this.http.get<Customer[]>(`${this.url}`);\r\n    }\r\n\r\n    //HttpGet api/customers/{id}\r\n    public getCustomer(id: string): Observable<Customer> {\r\n        return this.http.get<Customer>(`${this.url}/${id}`);\r\n    }\r\n\r\n    //HttpPost api/customers\r\n    public createCustomer(customer: Customer): Observable<Customer> {\r\n        return this.http.post<Customer>(`${this.url}`, customer);\r\n    }\r\n\r\n    //HttpPut api/customers/{id}\r\n    public updateCustomer(id: string, customer: Customer): Observable<boolean> {\r\n        return this.http.put<boolean>(`${this.url}/${id}`, customer);\r\n    }\r\n\r\n    //HttpDelete api/customers/{id}\r\n    public deleteCustomer(id: string): Observable<boolean> {\r\n        return this.http.delete<boolean>(`${this.url}/${id}`);\r\n    }\r\n\r\n    //HttpGet api/customers/statistics\r\n    public getStatistics(): Observable<Statistic> {\r\n        return this.http.get<Statistic>(`${this.url}/statistics`);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { User } from '../interfaces/user';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n    private url: string = 'http://localhost:52073/api/users';\n\n    constructor(private http: HttpClient) { }\n\n    //HttpGet api/users/{id}\r\n    public getUser(id: string): Observable<User> {\r\n        return this.http.get<User>(`${this.url}/${id}`);\r\n    }\r\n\r\n    //HttpGet api/users/byRole/{roleName}\r\n    public getUsersInRole(roleName: string): Observable<User[]> {\r\n        return this.http.get<User[]>(`${this.url}/byRole/${roleName}`);\r\n    }\n\n    //HttpGet api/users/isInRole/{userId}/{roleName}\n    public isInRole(userId: string, roleName: string): Observable<boolean> {\n        return this.http.get<boolean>(`${this.url}/isInRole/${userId}/${roleName}`);\r\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}